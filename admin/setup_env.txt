
-mettre a jour apt-get
sudo apt-get update

-install google app engine
cf. https://cloud.google.com/appengine/downloads#Google_App_Engine_SDK_for_Python
pour simplifier : ajouter appengine au path:
PYTHON_APP_ENGINE_SDK=~/dev/python_appengine/google_appengine
export PATH=$PATH:$PYTHON_APP_ENGINE_SDK
dans le ".profile" à la racine du repertoire d'un utilisateur


-selenium
python 2 : sudo pip install --upgrade selenium


-phantomJS
suivre instruction ici : http://phantomjs.org/download.html
actuellement, il faut builder depuis les sources
ensuite il faut ajouter le binaire buildé dans bin au PATH


-pour installer py.test
pip install -U pytest, cf. http://pytest.org/latest/getting-started.html

-demarrer le serveur GAE local
dev_appserver.py server/
(<path-to-Python-SDK>/dev_appserver.py <path-to-gae-application>/)


-pusher sur GAE : depuis gator/src/ :
appcfg.py --oauth2 -A gator-01 update server/


-acceder au site
http://gator-01.appspot.com/

-pour runner pylint dans pycharm
http://blog.saturnlaboratories.co.za/archive/2012/09/10/running-pylint-pycharm

-pour lever un warning pycharm de perf:
https://confluence.jetbrains.com/display/IDEADEV/Inotify+Watches+Limit

-pour que pycharm trouve les libs gae :
 http://stackoverflow.com/questions/24197970/pycharm-import-external-library

-pour que pycharm resolve les import entre test et prod:
http://stackoverflow.com/questions/17969025/unresolved-reference-when-importing-from-sibling-sub-package-with

-pour generer et utiliser une variable d'env encrypté dans travis:
http://docs.travis-ci.com/user/environment-variables/#Encrypted-Variables
Dedans ils parlent d'installer travis (ruby), pour ça il faut au préalable avoir rubly:
sudo apt-get install ruby-dev
cf. erreur détaillée ici :
http://stackoverflow.com/questions/13767725/unable-to-install-gem-failed-to-build-gem-native-extension-cannot-load-such
ALTERNATIVE : creer la variable directement depuis la GUI travis (ce que j'ai fait au final: + safe)

-pour que travis puisse deployer gae:
http://docsv2.readthedocs.org/en/latest/config.html
	Alternatively, you can use OAuth2 protocol to authenticate against the GAE API. To set it up, first run this command in the repository root on your local workstation:

	$PATH_TO_GAE_SDK/appcfg.py --oauth2 list_versions .
	It will open a page in your browser where you can authorize the GAE to access your Google account. As the result, .appcfg_oauth2_tokens file will be created in your home directory, containing the access token. You can then encrypt it as Shippable secure variable and use in your after_success step as follows:

	after_success:
	  - $GAE_DIR/google_appengine/appcfg.py --oauth2_access_token=$GAE_TOKEN update .



